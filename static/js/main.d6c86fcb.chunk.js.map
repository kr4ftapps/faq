{"version":3,"sources":["faq/Question.tsx","faq/Topic.tsx","faq/topics/clock_face_errors.tsx","faq/topics/general.tsx","faq/topics/index.tsx","faq/topics/payment_unlock.tsx","faq/topics/settings_configurations.tsx","faq/FAQ.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Question","props","bookmarked","id","window","location","hash","useState","opened","setOpened","voted","setVoted","className","onClick","data-track-section","data-track-action","data-track-label","data-track-value","title","Collapse","in","content","e","Topic","questions","length","Card","Body","Title","ListGroup","variant","map","q","index","Item","key","ClockfaceErrors","Fragment","href","target","rel","General","TopicsList","FAQ","topics","searchTerm","setSearchTerm","filteredTopics","setFilteredTopics","src","alt","Container","Row","Col","md","Form","Group","controlId","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","term","value","filtered","filter","topic","questionsFiltered","question","JSON","stringify","toLowerCase","indexOf","Append","Button","Nav","Link","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6c86fcb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport { IoMdThumbsDown, IoMdThumbsUp } from \"react-icons/io\";\nimport \"./Question.scss\";\n\nexport interface IQuestion {\n  id: string;\n  title: string;\n  content: any;\n  keywords?: string;\n  opened?: boolean;\n}\n\nexport const Question = (props: IQuestion) => {\n  const bookmarked = `#${props.id}` === window.location.hash;\n\n  const [opened, setOpened] = useState(bookmarked);\n  const [voted, setVoted] = useState(false);\n\n  return (\n    <div id={props.id} className={`question ${opened ? \"opened\" : \"\"}`}>\n      <div\n        className=\"question-title\"\n        onClick={() => setOpened(!opened)}\n        data-track-section=\"question\"\n        data-track-action=\"click\"\n        data-track-label={props.id}\n        data-track-value={opened ? \"close\" : \"open\"}\n      >\n        {props.title}\n      </div>\n      <Collapse in={opened}>\n        <div className=\"question-body\">\n          {props.content}\n\n          <div className=\"question-footer mt-2 py-1 text-right\">\n            <div className={\"text-muted \" + (voted ? \"\" : \"d-none\")}>\n              Thanks for voting!\n            </div>\n\n            <div className={\"text-muted \" + (voted ? \"d-none\" : \"\")}>\n              Did you find this helpful?\n            </div>\n\n            <div className={voted ? \"d-none\" : \"\"}>\n              <button\n                className=\"btn btn-light btn-sm mr-2\"\n                data-track-section=\"question\"\n                data-track-action=\"click\"\n                data-track-label={props.id}\n                data-track-value=\"unhelpful\"\n                onClick={e => setVoted(true)}\n              >\n                <IoMdThumbsDown className=\"icon\" />\n                No\n              </button>\n\n              <button\n                data-track-section=\"question\"\n                data-track-action=\"click\"\n                data-track-label={props.id}\n                data-track-value=\"helpful\"\n                className=\"btn btn-light btn-sm\"\n                onClick={e => setVoted(true)}\n              >\n                <IoMdThumbsUp className=\"icon\" />\n                Yes\n              </button>\n            </div>\n          </div>\n        </div>\n      </Collapse>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\nimport { IQuestion, Question } from \"./Question\";\nimport \"./Topic.scss\";\n\nexport interface ITopic {\n  id: string;\n  title: string;\n  questions: IQuestion[];\n  questionsFiltered?: IQuestion[];\n}\n\nexport const Topic = (props: ITopic) => {\n  if (!props.questions || props.questions.length <= 0) {\n    return <></>;\n  }\n  return (\n    <Card className=\"topic\" id={props.id}>\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <ListGroup variant=\"flush\">\n          {props.questions.map((q, index) => (\n            <ListGroup.Item className=\"p-0\" key={index}>\n              <Question {...q} />\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { ITopic } from \"../Topic\";\n\nexport const ClockfaceErrors: ITopic = {\n  id: \"clockface_errors\",\n  title: \"🕒 Clock face errors\",\n  questions: [\n    {\n      id: \"clock_error\",\n      title: \"There is an error message \\\"Clock Error\\\" in my watch. How do I fix it?\",\n      content: (\n        <React.Fragment>\n          <p>\n            This usually occurs if there is an interruption between your watch and phone while installing clock faces. Unfortunately, it appears to be fairly random and not limited to our clock faces. If you restart your watch and force quit the Fitbit app on your phone and try again, it should then install normally.\n            </p>\n          <p>\n            If the \"Clock Error\" message happens by itself after using the clock face for a while, swapping to a different clock face then installing this clock face again should fix it.\n            </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"install_notcomplete\",\n      title: \"The installation never completes, it just bounces back and forth.\",\n      content: (\n        <React.Fragment>\n          <p>\n            The Fitbit connection can be unstable when installing which can make things difficult. The best way to fix this issue is to hold all the button(s) on your watch until the Fitbit logo appears. While your watch is rebooting, turn your phone off and on again. After both devices turn back on, open the Fitbit app and sync and everything should work again.\n            </p>\n          <p>\n            If that doesn't work and you're using the new Fitbit update, try to switch clocks using the Clocks app on your watch - this can force the app to finish switching or installing.\n            </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"image_disappearing\",\n      title: \"My custom background image disappeared and I cannot get it back!\",\n      content: (\n        <React.Fragment>\n          <p>\n            Some of our clock faces have a custom background feature which let you use your own images/pictures as the background image.\n            </p>\n          <p>\n            We did receive reports from some users that the background might disappear/turn black out of nowhere. This error seems to happen randomly and according to reports only happens if the watch runs out of battery while using the custom background.\n          </p>\n          <p>\n            If you are facing this issue try following these steps:\n          </p>\n          <ul>\n            <li>Restart your mobile phone Bluetooth (turn it off/on again);</li>\n            <li>Sync your watch with Fitbit;</li>\n            <li>Reinstall the clockface (install a different one and then install it back);</li>\n          </ul>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"aod_not_working\",\n      title: \"The \\\"Always On Display\\\" feature is not working after updating!\",\n      content: (\n        <React.Fragment>\n          <p>\n            Most our clock faces had an <strong>Always On Display</strong> feature since their first releases, which used to leverage the <a href=\"https://dev.fitbit.com/build/reference/device-api/display\" target=\"_blank\" rel=\"noopener noreferrer\">display API</a> provided by Fitbit.\n            </p>\n          <p>\n            Unfortunately after the <a href=\"https://dev.fitbit.com/blog/2019-10-29-announcing-fitbit-os-sdk-4.0/\" target=\"_blank\" rel=\"noopener noreferrer\">release of SDK 4.0</a> this feature is not working anymore, which can be checked at the end of the release notes:\n          </p>\n          <blockquote>\n            <p>And Finally... We already know what you're thinking, so let's take a moment to address the elephant in the room.</p>\n            <p><strong>How do I utilize the Always on Display or microphone in my clock face or application?</strong></p>\n            <p>Unfortunately the short answer is you can't at this time. The slightly longer answer is that we're still assessing the capabilities in a way that would make the most sense, so stay tuned for future updates. In the meantime, express your interest by submitting feature suggestions in the community forum!</p>\n          </blockquote>\n          <p>\n            Some of our clock faces are now enabled for <a href=\"https://dev.fitbit.com/blog/2019-12-19-announcing-fitbit-os-sdk-4.1/#always-on-display-api\" target=\"_blank\" rel=\"noopener noreferrer\">built-in AOD</a> capability (only available for Versa 2) but we are continuing to deliver the previous <strong>Always On Display</strong> feature in the hope it will be enabled back again in the future.\n          </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"missing_parts\",\n      title: \"Some parts of the clock face are missing or displaying incorrectly.\",\n      content: (\n        <React.Fragment>\n          <p>\n            This can happen after installing a Fitbit app update or when you install a new version of a clock face. Please go to your clock face in the Fitbit app, and toggle all the permissions off and on again.\n            </p>\n          <p>\n            If that doesn't work, please install a different clock face, then install this one again.\n            </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"weather_notupdating\",\n      title: \"The weather forecast is not updating!\",\n      content: (\n        <React.Fragment>\n          <p>\n            The weather data is sent to your watch through your phone, so make sure your phone is nearby with Bluetooth turned on, location service enabled and access to the Internet.\n            </p>\n          <p>\n            In the Fitbit app you might want to check if the clock face permissions are enabled.\n            </p>\n          <p>\n            If you are still facing issues with the weather forest after checking the items above, you can try the following:\n            </p>\n          <ul>\n            <li>Restart your mobile phone Bluetooth (turn it off/on again);</li>\n            <li>Sync your watch with Fitbit;</li>\n            <li>Reinstall the clockface (install a different one and then install it back);</li>\n          </ul>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"access_settings_msg\",\n      title: \"What is this \\\"Access the settings page in your mobile device and login using your Fitbit account to use this clockface\\\" message about?\",\n      content: (\n        <React.Fragment>\n          <p>\n            We did try to make our users lives easier in our first clock faces by providing a way for them to avoid having to unlock their clock faces every time they did switch/reinstall them.\n            </p>\n          <p>\n            By asking our users to log in using their Fitbit account we have access to an unique identifier which we can use in subsequent installations to identify users back.\n            </p>\n          <p>\n            Unfortunately this feature apparently caused more issues than solved them, as some users seem to get stuck with a persistent message even after loging in succesfully.\n          </p>\n          <p>\n            We are slowly removing this feature from our clock faces but in the meantime if you are affected by the problem described try the following:\n          </p>\n          <ul>\n            <li>Restart your mobile phone Bluetooth (turn it off/on again);</li>\n            <li>Sync your watch with Fitbit;</li>\n            <li>Reinstall the clockface (install a different one and then install it back);</li>\n          </ul>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"nothing_working\",\n      title: \"None of the above works, what else can I try?\",\n      content: (\n        <React.Fragment>\n          <p>\n            If you swap to another clock face and swap back to this one, it should fix any strange issues you may be having. Please also ensure you have the latest Fitbit app updates and installed any watch updates too.\n            </p>\n          <p>\n            There is also a known Fitbit issue when updating the Fitbit app that can change your clock face permissions. Please go to your clock face in the Fitbit app, and toggle all the permissions off and on again.\n            </p>\n          <p>\n            Ultimately you can try the following:\n            </p>\n          <ul>\n            <li>Restart your mobile phone Bluetooth (turn it off/on again);</li>\n            <li>Sync your watch with Fitbit;</li>\n            <li>Reinstall the clockface (install a different one and then install it back);</li>\n          </ul>\n          <p>\n            If the steps above didn't help you, you might want to try <a href=\"#contact\">contacting us</a> directly.\n          </p>\n        </React.Fragment>\n      )\n    },\n  ]\n};\n","import React from \"react\";\nimport { ITopic } from \"../Topic\";\n\nexport const General: ITopic = {\n  id: \"general\",\n  title: \"🙋 General\",\n  questions: [\n    {\n      id: \"contact\",\n      title: \"Is there any way to contact you?\",\n      content:\n        <React.Fragment>\n          <p>\n            You can contact us though our email address <a href=\"mailto:kr4ftapps@gmail.com\">kr4ftapps@gmail.com</a>.\n          </p>\n        </React.Fragment>\n    }\n  ]\n};\n","import { ClockfaceErrors } from \"./clock_face_errors\";\nimport { General } from \"./general\";\nimport { PaymentUnlockTopic } from \"./payment_unlock\";\nimport { SettingsConfigurations } from \"./settings_configurations\";\n\nexport const TopicsList = [PaymentUnlockTopic, ClockfaceErrors, SettingsConfigurations, General];","import React from \"react\";\nimport { ITopic } from \"../Topic\";\n\nexport const PaymentUnlockTopic: ITopic = {\n  id: \"purchase_unlock\",\n  title: \"💳 Purchasing & Unlocking\",\n  questions: [\n    {\n      id: \"how_purchase\",\n      title: \"How do I purchase a clock face?\",\n      content: (\n        <React.Fragment>\n          <p>\n            After installing the clock face, a <strong>5-digit code</strong> will pop up on your watch.\n            </p>\n          <p>\n            Access the website shown on your watch <a href=\"https://kiezelpay.com/code/\" target=\"_blank\" rel=\"noopener noreferrer\">(or click here)</a> and type the code in.\n            </p>\n          <p>\n            Once purchased, the clock face will instantly unlock for you.\n          </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"bundle_purchase\",\n      title: \"How do I purchase a bundle?\",\n      content: (\n        <React.Fragment>\n          <p>\n            Bundles are usually a great way of saving money. If a bundle is offered with a clock face, it will probably have a better value for money.\n            </p>\n          <p>\n            Not every clock face is part of a bundle, but if the one you are purchasing is you will have the choice to opt in for the bundle during the payment.\n            </p>\n          <p>\n            You can also purchase bundles directly from our website at:\n            </p>\n          <ul className=\"mb-0\">\n            <li><a href=\"http://www.kr4ft.com\" target=\"_blank\" rel=\"noopener noreferrer\">Kr4ft</a></li>\n            <li><a href=\"http://www.tidalwave.eu\" target=\"_blank\" rel=\"noopener noreferrer\">Tidalwave</a></li>\n          </ul>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"already_paid\",\n      title: \"I have already paid, do I need to purchase again?\",\n      content: (\n        <React.Fragment>\n          <p>\n            Definitely not, purchases are valid for a lifetime. Once you have purchased a clock face you will have it for as long as you want.\n          </p>\n          <p>\n            Unfortunately Fitbit does not always allow us to recognize you again after (re)installing an app or clock face, so our system might think you are a new customer when that happens and might ask you to pay again.\n          </p>\n          <p>\n            If that does happen, just access the <a href=\"https://kiezelpay.com/unlock\" target=\"_blank\" rel=\"noopener noreferrer\">unlock feature</a>, type in your email and the <strong>5-digit code</strong> displayed and you will have access to the clock face again.\n          </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"find_own_clockfaces\",\n      title: \"How can I find which clock faces do I own?\",\n      content: (\n        <React.Fragment>\n          <p>\n            It might be hard to keep track of what clock faces you might own, but luckily you can check it up using the <a href=\"https://kiezelpay.com/lookup\" target=\"_blank\" rel=\"noopener noreferrer\">lookup feature</a>.\n          </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"refund\",\n      title: \"I'm not satisfied with a purchase and I want a refund!\",\n      content: (\n        <React.Fragment>\n          <p>\n            We are deeply sorry to hear about it. If you think there's something we can do to change your mind please <a href=\"#contact\">contact us</a> and we will try our best to sort whatever problems you might be facing.\n          </p>\n          <p>\n            If you are decided you want to request a refund you will need to <a href=\"https://kiezelpay.com/faq/faq-refund\" target=\"_blank\" rel=\"noopener noreferrer\">contact our payment provider</a> and they will handle it for you.\n          </p>\n        </React.Fragment>\n      )\n    }\n  ]\n};\n","import React from \"react\";\nimport { ITopic } from \"../Topic\";\n\nexport const SettingsConfigurations: ITopic = {\n  id: \"settings_configurations\",\n  title: \"⚙️ Settings & Configurations\",\n  questions: [\n    {\n      id: \"access_settings\",\n      title: \"How can I access the settings page?\",\n      content:\n        <React.Fragment>\n          <p>\n            You can access the settings page by following these simple steps:\n          </p>\n          <ul>\n            <li>Open the Fitbit app on your phone;</li>\n            <li>Tap the icon in the top left corner;</li>\n            <li>Select your watch in the list;</li>\n            <li>Select the clockface;</li>\n            <li>Click on <strong>settings</strong>;</li>\n          </ul>\n        </React.Fragment>\n    },\n    {\n      id: \"change_temperature_unit\",\n      title: \"How can I change the temperature from Celsius to Farenheit (or vice-versa)?\",\n      content:\n        <React.Fragment>\n          <p>\n            Some of our clock faces have a <strong>units and formats</strong> section in the settings page which let you configure how data is displayed according to your personal preference.\n          </p>\n          <p>\n            If the clock face does not have a settings page or if the settings page does not have the aforementioned section the temperature unit will be defined by the Fitbit <strong>Weather</strong> app.\n          </p>\n          <p>\n            To change the temperature unit in the <strong>Weather</strong> app follow the steps bellow:\n          </p>\n          <ul>\n            <li>Open the Fitbit app in your phone;</li>\n            <li>Tap the icon in the upper left corner;</li>\n            <li>Select your watch in the devices list;</li>\n            <li>Tap on <strong>My Apps</strong>;</li>\n            <li>Tap on the settings cog next to <strong>Weather</strong>;</li>\n            <li>Select the unit of your preference (either Celsius or Farenheit);</li>\n            <li>Tap on <strong>Done</strong>;</li>\n            <li>Go back to the previous page;</li>\n            <li>Make sure your phone synced the new setting to your tracker by verifying the sync time is shortly before the current time. If not, you'll need to manually sync. To manually sync just scroll down and tap <strong>Sync Now</strong>;</li>\n          </ul>\n        </React.Fragment>\n    },\n    {\n      id: \"change_distance_unit\",\n      title: \"How can I change the distance from Kilometers to Miles (or vice-versa)?\",\n      content:\n        <React.Fragment>\n          <p>\n            Some of our clock faces have a <strong>units and formats</strong> section in the settings page which let you configure how data is displayed according to your personal preference.\n          </p>\n          <p>\n            If the clock face does not have a settings page or if the settings page does not have the aforementioned section the distance unit will be defined by your <strong>Fitbit length unit preference</strong>.\n          </p>\n          <p>\n            To change the length unit preference follow the steps bellow:\n          </p>\n          <ul>\n            <li>Access your <a href=\"https://www.fitbit.com/user/profile/edit\" target=\"_blank\" rel=\"noopener noreferrer\">Fitbit profile</a> page;</li>\n            <li>Tap on <strong>Units</strong>;</li>\n            <li>In the <strong>Length</strong> field, select either <strong>Feet/Inches</strong> (for Miles) or <strong>Centimeters</strong> (for Kilometers);</li>\n            <li>Tap on <strong>Submit</strong>;</li>\n            <li>Open the Fitbit app in your phone;</li>\n            <li>Tap the icon in the upper left corner;</li>\n            <li>Select your watch in the devices list;</li>\n            <li>Make sure your phone synced the new setting to your tracker by verifying the sync time is shortly before the current time. If not, you'll need to manually sync. To manually sync just scroll down and tap <strong>Sync Now</strong>;</li>\n          </ul>\n        </React.Fragment>\n    },\n    {\n      id: \"change_date_format\",\n      title: \"How can I display the date in a different format?\",\n      content:\n        <React.Fragment>\n          <p>\n            Some of our clock faces have a <strong>units and formats</strong> section in the settings page which let you configure how data is displayed according to your personal preference.\n          </p>\n          <p>\n            If the clock face does not have a settings page or if the settings page does not have the aforementioned section the date format will be defined by your <strong>Fitbit profile language</strong>. Usually the format will be <strong>MM/DD</strong> for English (US) and <strong>DD/MM</strong> for everything else.\n          </p>\n          <p>\n            To change the language in your Fitbit profile follow the steps bellow:\n          </p>\n          <ul>\n            <li>Access your <a href=\"https://www.fitbit.com/user/profile/edit\" target=\"_blank\" rel=\"noopener noreferrer\">Fitbit profile</a> page;</li>\n            <li>Select your preferred language in the <strong>Language by region/country</strong> section;</li>\n            <li>Tap on <strong>Submit</strong>;</li>\n            <li>Open the Fitbit app in your phone;</li>\n            <li>Tap the icon in the upper left corner;</li>\n            <li>Select your watch in the devices list;</li>\n            <li>Make sure your phone synced the new setting to your tracker by verifying the sync time is shortly before the current time. If not, you'll need to manually sync. To manually sync just scroll down and tap <strong>Sync Now</strong>;</li>\n          </ul>\n        </React.Fragment>\n    },\n    {\n      id: \"change_time_format\",\n      title: \"How can I display the time in a different format?\",\n      content:\n        <React.Fragment>\n          <p>\n            Some of our clock faces have a <strong>units and formats</strong> section in the settings page which let you configure how data is displayed according to your personal preference.\n          </p>\n          <p>\n            If the clock face does not have a settings page or if the settings page does not have the aforementioned section the time format will be defined by your <strong>Fitbit clock display time preference</strong>.\n          </p>\n          <p>\n            To change the clock display time preference follow the steps bellow:\n          </p>\n          <ul>\n            <li>Access your <a href=\"https://www.fitbit.com/user/profile/edit\" target=\"_blank\" rel=\"noopener noreferrer\">Fitbit profile</a> page;</li>\n            <li>Select your preferred format in the <strong>Clock Display Time</strong> section;</li>\n            <li>Tap on <strong>Submit</strong>;</li>\n            <li>Open the Fitbit app in your phone;</li>\n            <li>Tap the icon in the upper left corner;</li>\n            <li>Select your watch in the devices list;</li>\n            <li>Make sure your phone synced the new setting to your tracker by verifying the sync time is shortly before the current time. If not, you'll need to manually sync. To manually sync just scroll down and tap <strong>Sync Now</strong>;</li>\n          </ul>\n        </React.Fragment>\n    }\n  ]\n};\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Container,\n  Form,\n  FormControl,\n  InputGroup,\n  Nav,\n  Row\n} from \"react-bootstrap\";\nimport \"./FAQ.scss\";\nimport { ITopic, Topic } from \"./Topic\";\nimport { TopicsList } from \"./topics\";\n\nfunction FAQ() {\n  const topics: ITopic[] = TopicsList;\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredTopics, setFilteredTopics] = useState(topics);\n\n  const inputSearchChanged = (e: any) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n\n    const filtered =\n      topics.filter(topic => {\n        topic.questionsFiltered = topic.questions.filter(\n          question =>\n            JSON.stringify(question)\n              .toLowerCase()\n              .indexOf(term) >= 0\n        );\n        return !!topic.questionsFiltered.length;\n      }) || [];\n\n    setFilteredTopics(filtered);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"hero\">\n        <img src=\"hero_bg.png\" className=\"bg\" alt=\"background\" />\n        <Container className=\"h-100\">\n          <Row className=\"h-100\">\n            <Col md={12} className=\"d-flex flex-column justify-content-center\">\n              <h1 className=\"mb-3 \">How can we help?</h1>\n\n              <Form.Group controlId=\"formSearch\">\n                <InputGroup className=\"mb-3 searchInput\">\n                  <FormControl\n                    placeholder=\"Let us help you to find your answer\"\n                    aria-label=\"Search\"\n                    aria-describedby=\"basic-search\"\n                    data-track-section=\"question\"\n                    data-track-action=\"blur\"\n                    data-track-label=\"search\"\n                    data-track-value={searchTerm}\n                    onChange={inputSearchChanged}\n                    value={searchTerm}\n                  />\n                  <InputGroup.Append>\n                    <Button variant=\"primary\">Search</Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n      <Container>\n        {/* <Row>\n          <Col>\n            <h5 className=\"my-3 h5\">Popular questions</h5>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <PopularQuestions />\n          </Col>\n        </Row> */}\n\n        <Row className=\"mt-4\">\n          <Col md={4} className=\"topics-nav mb-4\">\n            <Card>\n              <Nav className=\"flex-md-column flex-xs-row\">\n                {topics.map(topic => (\n                  <Nav.Link href={`#${topic.id}`} key={topic.id}>\n                    {topic.title}\n                  </Nav.Link>\n                ))}\n              </Nav>\n            </Card>\n          </Col>\n          <Col\n            md={8}\n            className=\"topics d-flex flex-column justify-content-center\"\n          >\n            {filteredTopics.length > 0 &&\n              filteredTopics.map(topic => (\n                <Topic\n                  id={topic.id}\n                  key={topic.id}\n                  title={topic.title}\n                  questions={topic.questionsFiltered || topic.questions}\n                />\n              ))}\n            {filteredTopics.length === 0 && (\n              <span className=\"text-center\">\n                Oh snap! We didn't find an answer to that. What about searching\n                for something else?\n              </span>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default FAQ;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport FAQ from \"./faq/FAQ\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FAQ />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}